# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14zxyLh7Gb46OeyGj6j8MzQwNYd1oj3UP
"""

import streamlit as st
import pandas as pd

st.set_page_config(page_title="Simulasi Clinker Factor dan Emisi CO₂", layout="wide")

# --- Load Excel ---
@st.cache_data

def load_data():
    return pd.read_excel("Clinker_Factor_2025.xlsx", sheet_name="MTD")

df_raw = load_data()

st.title("📊 Simulasi Clinker Factor Konsolidasi dan Per Tipe Semen + Emisi CO₂")

# --- Sidebar Selection ---
bulan = st.selectbox("Pilih Bulan:", sorted(df_raw['Month'].dropna().unique()))
tipe_data_options = [col for col in df_raw.columns if 'Tipe Data' in col or 'tipe data' in col or 'Data Type' in col or 'data type' in col]
tipe_data_col = tipe_data_options[0] if tipe_data_options else None

tipe_data = st.selectbox("Pilih Jenis Data:", df_raw[tipe_data_col].dropna().unique() if tipe_data_col else [])

periode = st.radio("Pilih Periode:", ["MTD", "YTD"])

# --- Filter Data ---
if tipe_data_col:
    df_filtered = df_raw[(df_raw["Month"] == bulan) & (df_raw[tipe_data_col] == tipe_data) & (df_raw["Periode"] == periode)].copy()
else:
    st.error("Kolom 'Tipe Data' tidak ditemukan. Periksa struktur file Excel Anda.")
    st.stop()

# --- Persiapan DataFrame ---
df_filtered = df_filtered[["Cement Type", "Clinker Consumption", "Cement Production"]].copy()
df_filtered["Clinker Factor"] = df_filtered["Clinker Consumption"] / df_filtered["Cement Production"] * 100

total_cement = df_filtered["Cement Production"].sum()
total_clinker = df_filtered["Clinker Consumption"].sum()
cf_awal = total_clinker / total_cement * 100

st.write(f"**Clinker Factor Konsolidasi Awal: {cf_awal:.2f}%**")

# --- Simulasi ---
mode = st.radio("Pilih Mode Simulasi:", ["Ubah CF Konsolidasi", "Ubah CF per Tipe Semen"])

if mode == "Ubah CF Konsolidasi":
    target_cf = st.number_input("Masukkan target Clinker Factor Konsolidasi (%)", min_value=0.0, max_value=100.0, value=cf_awal)
    semen_dipilih = st.multiselect("Pilih tipe semen yang akan disesuaikan Clinker Consumption-nya:", df_filtered["Cement Type"].tolist())

    if len(semen_dipilih) < 2:
        st.warning("⚠️ Harap pilih minimal 2 tipe semen untuk simulasi.")
    else:
        df_new = df_filtered.copy()

        # Semen yang tidak dipilih
        df_tetap = df_new[~df_new["Cement Type"].isin(semen_dipilih)]
        clinker_tetap = df_tetap["Clinker Consumption"].sum()

        # Semen yang dipilih
        df_ubah = df_new[df_new["Cement Type"].isin(semen_dipilih)].copy()
        total_prod_ubah = df_ubah["Cement Production"].sum()

        # Hitung clinker total sesuai target CF
        clinker_total_target = (target_cf / 100) * total_cement
        clinker_ubah_total = clinker_total_target - clinker_tetap

        # Update clinker semen yang dipilih secara proporsional
        for idx in df_ubah.index:
            prod = df_ubah.at[idx, "Cement Production"]
            clinker_baru = clinker_ubah_total * (prod / total_prod_ubah)
            df_new.at[idx, "Clinker Consumption"] = clinker_baru
            df_new.at[idx, "Clinker Factor"] = clinker_baru / prod * 100

        cf_konsolidasi_baru = df_new["Clinker Consumption"].sum() / total_cement * 100

        st.subheader("📋 Kondisi Sebelum")
        st.dataframe(df_filtered[df_filtered["Cement Type"].isin(semen_dipilih)])

        st.subheader("📊 Kondisi Setelah")
        st.dataframe(df_new[df_new["Cement Type"].isin(semen_dipilih)])

        st.write(f"**CF Konsolidasi Setelah Simulasi: {cf_konsolidasi_baru:.2f}%**")

        # --- Emisi CO2 ---
        st.subheader("🌍 Estimasi Emisi CO₂")
        stec = st.number_input("STEC (MJ/ton Clinker)", value=3340)
        tsr_biomass = st.number_input("TSR Biomass (%)", value=4.0)
        tsr_aff = st.number_input("TSR Alternative Fossil Fuel (%)", value=2.6)
        calcination_factor = st.number_input("Calcination Factor (kg CO₂/ton Clinker)", value=531.0)

        cf_input = cf_konsolidasi_baru  # dari hasil simulasi
        gross_emission = cf_input / 100 * calcination_factor
        net_emission = gross_emission * (1 - tsr_biomass / 100)

        st.success(f"CO₂ Specific Gross: {gross_emission:.0f} kg CO₂/ton cement Eq")
        st.success(f"CO₂ Specific Net: {net_emission:.0f} kg CO₂/ton cement Eq")

elif mode == "Ubah CF per Tipe Semen":
    semen_dipilih = st.multiselect("🔧 Pilih tipe semen yang ingin diubah nilai Clinker Factor-nya:", df_filtered["Cement Type"].tolist())
    cf_baru_dict = {}
    if semen_dipilih:
        st.subheader("✏️ Masukkan Clinker Factor Baru untuk Setiap Tipe Semen:")
        for semen in semen_dipilih:
            default_val = float(df_filtered[df_filtered["Cement Type"] == semen]["Clinker Factor"])
            cf_input = st.number_input(f"{semen} (CF Baru %):", min_value=0.0, max_value=100.0, value=round(default_val, 2))
            cf_baru_dict[semen] = cf_input

    if cf_baru_dict:
        df_result = df_filtered.copy()
        for semen, cf_new in cf_baru_dict.items():
            idx = df_result[df_result["Cement Type"] == semen].index[0]
            prod = df_result.loc[idx, "Cement Production"]
            df_result.at[idx, "Clinker Factor"] = cf_new
            df_result.at[idx, "Clinker Consumption"] = prod * cf_new / 100

        total_clinker_baru = df_result["Clinker Consumption"].sum()
        cf_konsolidasi_baru = total_clinker_baru / total_cement * 100

        st.subheader("📋 Kondisi Sebelum")
        st.dataframe(df_filtered[df_filtered["Cement Type"].isin(semen_dipilih)])

        st.subheader("📊 Kondisi Setelah")
        st.dataframe(df_result[df_result["Cement Type"].isin(semen_dipilih)])

        st.write(f"**Clinker Factor Konsolidasi Setelah Simulasi: {cf_konsolidasi_baru:.2f}%**")

        # --- Emisi CO2 ---
        st.subheader("🌍 Estimasi Emisi CO₂")
        stec = st.number_input("STEC (MJ/ton Clinker)", value=3340)
        tsr_biomass = st.number_input("TSR Biomass (%)", value=4.0)
        tsr_aff = st.number_input("TSR Alternative Fossil Fuel (%)", value=2.6)
        calcination_factor = st.number_input("Calcination Factor (kg CO₂/ton Clinker)", value=531.0)

        cf_input = cf_konsolidasi_baru  # dari hasil simulasi
        gross_emission = cf_input / 100 * calcination_factor
        net_emission = gross_emission * (1 - tsr_biomass / 100)

        st.success(f"CO₂ Specific Gross: {gross_emission:.0f} kg CO₂/ton cement Eq")
        st.success(f"CO₂ Specific Net: {net_emission:.0f} kg CO₂/ton cement Eq")