# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vgiM2z4w-3xsl_Bcq5VjLDkw3zRBr_CI
"""

import streamlit as st
import pandas as pd
import openpyxl

st.set_page_config(page_title="Simulasi Clinker Factor & CO₂", layout="wide")
st.title("Simulasi Clinker Factor Konsolidasi dan Per Tipe Semen +  Emisi CO₂")

# Load Excel
@st.cache_data
def load_data():
    file_path = "Clinker_Factor_2025.xlsx"
    xls = pd.ExcelFile(file_path)
    df_mtd = pd.read_excel(xls, sheet_name="MTD")
    return df_mtd

df_raw = load_data()

# Sidebar input
tipe_data = st.sidebar.selectbox("Pilih Tipe Data", ["MTD", "YTD"])
bulan = st.sidebar.selectbox("Pilih Bulan", df_raw["Month"].unique())
data_source = st.sidebar.radio("Pilih Data", ["Actual", "Budget"])
mode = st.sidebar.radio("Pilih Mode Simulasi", ["Ubah CF Konsolidasi", "Ubah CF per Tipe Semen"])

# Filter data
kolom_clinker = f"Clinker Consumption ({data_source})"
kolom_cement = f"Cement Production ({data_source})"
kolom_cf = f"Clinker Factor ({data_source})"

filtered_df = df_raw[(df_raw["Month"] == bulan) & (df_raw["Tipe Data"] == tipe_data)]
df = filtered_df[["Cement type", kolom_clinker, kolom_cement, kolom_cf]].copy()
df.columns = ["Cement type", "Clinker Consumption (ton)", "Cement Production (ton)", "Clinker Factor (%)"]

# Hitung Clinker Factor Konsolidasi
clinker_total = df["Clinker Consumption (ton)"].sum()
cement_total = df["Cement Production (ton)"].sum()
cf_konsolidasi_awal = clinker_total / cement_total * 100

st.write(f"### Clinker Factor Konsolidasi Awal: `{cf_konsolidasi_awal:.2f}%`")

# Simulasi
df_new = df.copy()
cf_konsolidasi_baru = cf_konsolidasi_awal

if mode == "Ubah CF Konsolidasi":
    target_cf = st.number_input("Masukkan target Clinker Factor Konsolidasi (%)", min_value=0.0, max_value=100.0, value=cf_konsolidasi_awal)
    semen_dipilih = st.multiselect("Pilih tipe semen yang akan disesuaikan Clinker Consumption-nya:", df["Cement type"].tolist())

    if len(semen_dipilih) <= 1:
        st.error("❌ Pilih minimal 2 tipe semen untuk simulasi konsolidasi.")
    elif semen_dipilih:
        total_prod_selected = df[df["Cement type"].isin(semen_dipilih)]["Cement Production (ton)"].sum()
        clinker_baru_total = target_cf / 100 * cement_total
        gap = clinker_total - clinker_baru_total

        for semen in semen_dipilih:
            idx = df_new[df_new["Cement type"] == semen].index[0]
            prod = df_new.at[idx, "Cement Production (ton)"]
            clinker_baru = df.at[idx, "Clinker Consumption (ton)"] - gap * (prod / total_prod_selected)
            df_new.at[idx, "Clinker Consumption (ton)"] = clinker_baru
            df_new.at[idx, "Clinker Factor (%)"] = clinker_baru / prod * 100

        cf_konsolidasi_baru = df_new["Clinker Consumption (ton)"].sum() / cement_total * 100

        st.subheader("📋 Kondisi Sebelum")
        st.dataframe(df[df["Cement type"].isin(semen_dipilih)])

        st.subheader("📊 Kondisi Setelah")
        st.dataframe(df_new[df_new["Cement type"].isin(semen_dipilih)])

        st.success(f"✅ CF Konsolidasi Setelah Simulasi: `{cf_konsolidasi_baru:.2f}%`")

elif mode == "Ubah CF per Tipe Semen":
    semen_dipilih = st.multiselect("🔧 Pilih tipe semen yang ingin diubah nilai Clinker Factor-nya:", df["Cement type"].tolist())
    cf_baru_dict = {}
    if semen_dipilih:
        st.subheader("✏️ Masukkan Clinker Factor Baru untuk Setiap Tipe Semen:")
        for semen in semen_dipilih:
            default_val = float(df[df["Cement type"] == semen]["Clinker Factor (%)"])
            cf_input = st.number_input(f"{semen} (CF Baru %):", min_value=0.0, max_value=100.0, value=round(default_val, 2))
            cf_baru_dict[semen] = cf_input

    if cf_baru_dict:
        for semen, cf_new in cf_baru_dict.items():
            idx = df_new[df_new["Cement type"] == semen].index[0]
            prod = df_new.loc[idx, "Cement Production (ton)"]
            df_new.at[idx, "Clinker Consumption (ton)"] = prod * cf_new / 100
            df_new.at[idx, "Clinker Factor (%)"] = cf_new

        cf_konsolidasi_baru = df_new["Clinker Consumption (ton)"].sum() / cement_total * 100

        st.subheader("📋 Kondisi Sebelum")
        st.dataframe(df[df["Cement type"].isin(cf_baru_dict.keys())])

        st.subheader("📊 Kondisi Setelah")
        st.dataframe(df_new[df_new["Cement type"].isin(cf_baru_dict.keys())])

        st.success(f"✅ CF Konsolidasi Setelah Simulasi: `{cf_konsolidasi_baru:.2f}%`")

# CO2 Simulation
st.subheader("🌱 Simulasi Emisi CO₂ Scope 1")
st.markdown(f"**Clinker Factor Konsolidasi (hasil simulasi): `{cf_konsolidasi_baru:.2f}%`**")

stec = st.number_input("STEC (Mj/ton Clinker)", value=3340, step=1)
tsr_biomass = st.number_input("TSR Biomass (%)", value=8.0, step=1.0)
tsr_aff = st.number_input("TSR Alternative Fossil Fuel (%)", value=5.6, step=1.0)
calcination_factor = st.number_input("Calcination Factor (kg CO2/ton Clinker)", value=532, step=1)

emission_factor_fossil = 0.094
co2_gross = (cf_konsolidasi_baru * calcination_factor) / 1000
total_tsr = tsr_biomass + tsr_aff
thermal_term = (1 - total_tsr / 100) * stec * emission_factor_fossil / 1000
co2_net = co2_gross + thermal_term

st.metric("💨 CO2 Specific Gross (kg CO2/ton cement)", f"{co2_gross:.0f}")
st.metric("♻️ CO2 Specific Net (kg CO2/ton cement)", f"{co2_net:.0f}")