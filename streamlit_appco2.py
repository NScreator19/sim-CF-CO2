# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vgiM2z4w-3xsl_Bcq5VjLDkw3zRBr_CI
"""

import streamlit as st
import pandas as pd

# Judul App
st.set_page_config(layout="wide")
st.title("Simulasi Clinker Factor Konsolidasi dan Per Tipe Semen + Emisi CO₂")

# Load Excel
@st.cache_data

def load_data():
    df_raw = pd.read_excel("Clinker_Factor_2025.xlsx", sheet_name="MTD")
    df_raw.columns = df_raw.columns.str.strip().str.lower()  # Normalisasi kolom
    return df_raw

df_raw = load_data()
st.write("Kolom yang tersedia di file:", df_raw.columns.tolist())

# Input Pilihan
bulan = st.selectbox("Pilih Bulan:", df_raw["month"].dropna().unique())
tipe_data = st.selectbox("Pilih Jenis Data:", df_raw["tipe data"].dropna().unique())

# Filter data berdasarkan input
try:
    df_filtered = df_raw[(df_raw["month"] == bulan) & (df_raw["tipe data"] == tipe_data)]
except KeyError as e:
    st.error(f"Kolom tidak ditemukan di file: {e}")
    st.stop()

if df_filtered.empty:
    st.warning("Data kosong untuk pilihan bulan dan tipe data tersebut.")
    st.stop()

# Hitung CF Konsolidasi Awal
df_filtered["clinker factor"] = (df_filtered["clinker consumption"] / df_filtered["cement production"] * 100).round(2)
total_clinker = df_filtered["clinker consumption"].sum()
total_cement = df_filtered["cement production"].sum()
cf_konsolidasi_awal = total_clinker / total_cement * 100

st.write(f"**Clinker Factor Konsolidasi Awal: {cf_konsolidasi_awal:.2f}%**")

# Pilih Mode Simulasi
mode = st.radio("Pilih Mode Simulasi:", ["Ubah CF Konsolidasi", "Ubah CF per Tipe Semen"])

if mode == "Ubah CF Konsolidasi":
    target_cf = st.number_input("Target Clinker Factor Konsolidasi (%)", min_value=0.0, max_value=100.0, value=cf_konsolidasi_awal)
    semen_dipilih = st.multiselect("Pilih tipe semen yang akan disesuaikan Clinker Consumption-nya:", df_filtered["cement type"].tolist())

    if len(semen_dipilih) <= 1:
        st.warning("⚠️ Harap pilih minimal 2 tipe semen untuk melakukan simulasi.")
        st.stop()

    df_new = df_filtered.copy()

    # Semen yang tidak dipilih
    df_tetap = df_new[~df_new["cement type"].isin(semen_dipilih)]
    clinker_tetap = df_tetap["clinker consumption"].sum()

    # Semen yang dipilih
    df_ubah = df_new[df_new["cement type"].isin(semen_dipilih)].copy()
    total_prod_ubah = df_ubah["cement production"].sum()

    # Hitung clinker total sesuai target CF
    clinker_total_target = (target_cf / 100) * total_cement
    clinker_ubah_total = clinker_total_target - clinker_tetap

    # Update clinker semen yang dipilih secara proporsional
    for idx in df_ubah.index:
        prod = df_ubah.at[idx, "cement production"]
        clinker_baru = clinker_ubah_total * (prod / total_prod_ubah)
        df_new.at[idx, "clinker consumption"] = clinker_baru
        df_new.at[idx, "clinker factor"] = clinker_baru / prod * 100

    cf_konsolidasi_baru = df_new["clinker consumption"].sum() / total_cement * 100

    st.subheader("📋 Kondisi Sebelum")
    st.dataframe(df_filtered[df_filtered["cement type"].isin(semen_dipilih)])

    st.subheader("📊 Kondisi Setelah")
    st.dataframe(df_new[df_new["cement type"].isin(semen_dipilih)])

    st.write(f"**Clinker Factor Konsolidasi Setelah Simulasi: {cf_konsolidasi_baru:.2f}%**")

elif mode == "Ubah CF per Tipe Semen":
    semen_dipilih = st.multiselect("Pilih tipe semen yang ingin diubah CF-nya:", df_filtered["cement type"].tolist())

    if not semen_dipilih:
        st.stop()

    cf_baru_dict = {}
    for semen in semen_dipilih:
        default_val = float(df_filtered[df_filtered["cement type"] == semen]["clinker factor"])
        cf_input = st.number_input(f"{semen} - CF Baru (%):", min_value=0.0, max_value=100.0, value=round(default_val, 2))
        cf_baru_dict[semen] = cf_input

    df_result = df_filtered.copy()
    for semen, cf_new in cf_baru_dict.items():
        idx = df_result[df_result["cement type"] == semen].index[0]
        prod = df_result.loc[idx, "cement production"]
        df_result.at[idx, "clinker factor"] = cf_new
        df_result.at[idx, "clinker consumption"] = prod * cf_new / 100

    cf_konsolidasi_baru = df_result["clinker consumption"].sum() / total_cement * 100

    st.subheader("📋 Kondisi Sebelum")
    st.dataframe(df_filtered[df_filtered["cement type"].isin(semen_dipilih)])

    st.subheader("📊 Kondisi Setelah")
    st.dataframe(df_result[df_result["cement type"].isin(semen_dipilih)])

    st.write(f"**Clinker Factor Konsolidasi Setelah Simulasi: {cf_konsolidasi_baru:.2f}%**")